{"version":3,"sources":["../src/testRequest.js","../src/testAuthBuilder.js"],"names":["mock","XMLHttpRequest","request","url","callEvent","name","arg","fns","events","get","forEach","fn","call","self","hasResponse","xhr","type","responseType","response","responseText","respond","o","result","status","e","headers","Map","onload","onerror","ontimeout","onreadystatechange","readyState","on","cb","handlers","set","push","header","value","toLowerCase","undefined","remove","mimeType","r","data","callback","send","post","method","open","v","k","setRequestHeader","json","defaultMimeType","JSON","parse","TestAuthorizationV2Builder","AuthorizationV2Builder","val","this","fixedDate","_fixedDate","d","Date","signingKey"],"mappings":"AAAA,SAASA,KAAKC,OAENC,EAAU,SAAVA,EAAmBC,YAcVC,EAAUC,EAAMC,OACfC,EAAMC,EAAOC,IAAIJ,GAClBE,KACGG,QAAQ,SAACC,KACNC,KAAKC,EAAMP,cAKjBQ,EAAYC,OACbC,EAAOD,EAAIE,oBACRD,GAAiB,SAATA,EACTD,EAAIG,SACJH,EAAII,sBAGLC,EAAQC,OACYC,EAArBC,EAASR,EAAIQ,WACZA,GAAUT,EAAYC,IAChBQ,GAAU,KAAOA,EAAS,KACf,MAAXA,EAAgB,MACdR,EACLG,QAEaA,EAASN,KAAKC,EAAME,GAC/B,MAAOS,qBACCZ,KAAK,QAASV,EAASsB,UAIxBT,IAEH,OAAQO,UAER,QAASD,OAzCvBH,EANEH,EAAM,IAAId,EACVwB,EAAU,IAAIC,IACdlB,EAAS,IAAIkB,IACbb,sBAKME,EACNA,EAAIY,OAASZ,EAAIa,QAAUb,EAAIc,UAAYT,EAC3CL,EAAIe,mBAAqB,SAAST,KAASU,WAAa,GAAKX,EAAQC,MAyCtEW,GAAK,SAAC3B,EAAM4B,OACTC,EAAW1B,EAAOC,IAAIJ,UACpB6B,WAEKC,IAAI9B,EAAM6B,MAEZE,KAAKH,GACPpB,KAGNwB,OAAS,SAAChC,EAAMiC,aACTjC,EAAO,IAAIkC,mBACLC,IAAVF,EAA4Bb,EAAQhB,IAAIJ,IAC/B,MAATiC,EAAeb,EAAQgB,OAAOpC,GAC7BoB,EAAQU,IAAI9B,EAAMiC,EAAQ,IACxBzB,MAGN6B,SAAW,SAAC1B,YACLmB,IAAI,SAAUnB,GACfH,KAGNK,SAAW,SAACyB,YACFA,EACJ9B,KAGNJ,IAAM,SAACmC,EAAMC,UACPhC,EAAKiC,KAAK,MAAOF,EAAMC,MAG7BE,KAAO,SAACH,EAAMC,UACRhC,EAAKiC,KAAK,OAAQF,EAAMC,MAG9BC,KAAO,SAACE,EAAQJ,EAAMX,YACnBgB,KAAKD,EAAQ7C,KACTO,QAAQ,SAACwC,EAAGC,KACZC,iBAAiBD,EAAGD,KAEvBjB,KACID,GAAG,QAASC,GAAID,GAAG,OAAQ,SAACjB,UAAQkB,EAAG,KAAMlB,OAE5C,aAAcA,KACpB+B,KAAKF,GACF/B,GAGJA,GAaPwC,EAVO,SAASC,EAAiBpC,UAC1B,SAASf,EAAK0C,OACbF,EAAIzC,EAAQC,GAAKuC,SAASY,GAAiBpC,SAASA,UACxC,MAAZ2B,EACOF,EAAElC,IAAIoC,GAEVF,GAIJ3B,CAAK,mBAAoB,SAASD,UAClCwC,KAAKC,MAAMzC,EAAII,+BAIbjB,OACHmD,qqCCrHRI,2BAAAA,SAAAA,8JAAmCC,kEA6BhCC,+FACiBC,KAAKC,WAAaF,4CApB7BC,KAAKE,yBAGFH,OACJI,EAAKJ,aAAeK,KAAOL,EAAM,IAAIK,UACtCF,WAAaC,uFACPA,mDAIHH,KAAKK,iBApBfR","file":"lib/solarnetwork-test-utils.es.min.js.map","sourcesContent":["function mock(XMLHttpRequest) {\n\n    var request = function(url) {\n        const xhr = new XMLHttpRequest();\n        const headers = new Map();\n        const events = new Map();\n        const self = {};\n\n        /** @type {function} */\n        var response;\n\n        \"onload\" in xhr\n            ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n            : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n\n        function callEvent(name, arg) {\n            const fns = events.get(name);\n            if ( fns ) {\n                fns.forEach((fn) => {\n                    fn.call(self, arg);\n                });\n            }\n        }\n        \n        function hasResponse(xhr) {\n            var type = xhr.responseType;\n            return type && type !== \"text\"\n                ? xhr.response // null on error\n                : xhr.responseText; // \"\" on error\n        }\n        \n        function respond(o) {\n            var status = xhr.status, result;\n            if (!status && hasResponse(xhr)\n                    || status >= 200 && status < 300\n                    || status === 304) {\n                result = xhr;\n                if (response) {\n                    try {\n                        result = response.call(self, xhr);\n                    } catch (e) {\n                        event.call(\"error\", request, e);\n                        return;\n                    }\n                } else {\n                    result = xhr;\n                }\n                callEvent(\"load\", result);\n            } else {\n                callEvent(\"error\", o);\n            }\n        }\n\n        self.on = (name, cb) => {\n            let handlers = events.get(name);\n            if ( !handlers ) {\n                handlers = [];\n                events.set(name, handlers);\n            }\n            handlers.push(cb);\n            return self;\n        };\n\n        self.header = (name, value) => {\n            name = (name + \"\").toLowerCase();\n            if (value === undefined) return headers.get(name);\n            if (value == null) headers.remove(name);\n            else headers.set(name, value + \"\");\n            return self;\n        };\n\n        self.mimeType = (type) => {\n            headers.set('Accept', type);\n            return self;\n        };\n\n        self.response = (r) => {\n            response = r;\n            return self;\n        };\n\n        self.get = (data, callback) => {\n            return self.send(\"GET\", data, callback);\n        };\n\n        self.post = (data, callback) => {\n            return self.send(\"POST\", data, callback);\n        };\n\n        self.send = (method, data, cb) => {\n            xhr.open(method, url);\n            headers.forEach((v, k) => {\n                xhr.setRequestHeader(k, v);\n            });\n            if ( cb ) {\n                self.on(\"error\", cb).on(\"load\", (xhr) => cb(null, xhr));\n            }\n            callEvent('beforesend', xhr);\n            xhr.send(data);\n            return self;\n        };\n\n        return self;\n    };\n\n    var type = function(defaultMimeType, response) {\n        return function(url, callback) {\n            var r = request(url).mimeType(defaultMimeType).response(response);\n            if (callback != null) {\n                return r.get(callback);\n            }\n            return r;\n        };\n    };\n\n    var json = type(\"application/json\", function(xhr) {\n        return JSON.parse(xhr.responseText);\n    });\n\n    return {\n        request: request,\n        json: json,\n    };\n}\n\nexport default mock;\n","import { AuthorizationV2Builder } from 'solarnetwork-api-core';\n\n/**\n * An extension of `AuthorizationV2Builder` to help with testing.\n */\nclass TestAuthorizationV2Builder extends AuthorizationV2Builder {\n\n    /**\n     * Set the fixed authorization request date.\n     *\n     * <p>This date will be used even when the `date()` function is called.\n     * \n     * @type {Date} the fixed date to use\n     */\n    get fixedDate() {\n        return this._fixedDate;\n    }\n\n    set fixedDate(val) {\n        const d = (val instanceof Date ? val : new Date());\n        this._fixedDate = d;\n        super.date(d);\n    }\n\n    get signingKeyValid() {\n        return (this.signingKey ? true : false);\n    }\n\n    /**\n     * Set the authorization request date.\n     *\n     * @inheritdoc\n     * @override\n     */\n    date(val) {\n        return super.date(this.fixedDate || val);\n    }\n\n}\n\nexport default TestAuthorizationV2Builder;\n"]}